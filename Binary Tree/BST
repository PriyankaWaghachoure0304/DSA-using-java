package priyanka;
import java.util.*;
public class BinaryTree
{
	static class Node
	{
		int data;
		Node left;
		Node right;
		
		Node(int data)
		{
			this.data=data;
			this.left=null;
			this.right=null;
		}
	}
	static class binarytree
	{
		static int idx=-1;
		public static Node buildTree(int nodes[])
		{
			idx++;
			if(nodes[idx]==-1)
			{
				return null;
			}
			Node newNode=new Node(nodes[idx]);
			newNode.left=buildTree(nodes);
			newNode.right=buildTree(nodes);
			
			return newNode;
		}
	}
	
	//preorder traversal
	public static void preorder(Node root)
	{
		if(root==null)
		{
			return;
		}
		System.out.print(root.data+" ");
		preorder(root.left);
		preorder(root.right);
	}
	
	//inorder traversal
	public static void inorder(Node root)
	{
		if(root==null)
		{
			return;
		}
		inorder(root.left);
		System.out.print(root.data+" ");
		inorder(root.right);
	}
	
	//postorder
	public static void postorder(Node root)
	{
		if(root==null)
		{
			return;
		}
		postorder(root.left);
		postorder(root.right);
		System.out.print(root.data+" ");
	}
	
	//level order-->iterative
	public static void levelOrder(Node root)
	{
		if(root==null)
		{
			return;
		}
		Queue <Node> q=new LinkedList<>();
		q.add(root);
		q.add(null);
		
		while(!q.isEmpty())
		{
			Node currentNode=q.remove();
			if(currentNode==null)
			{
				System.out.println();
				if(q.isEmpty())
				{
					break;
				}
				else
				{
					System.out.println(currentNode.data+" ");
					if(currentNode.left!=null)
					{
						q.add(currentNode.left);
					}
					if(currentNode.right!=null)
					{
						q.add(currentNode.right);
					}
				}
			}
		}
		
	}
	//count of nodes
	public static int countNode(Node root)
	{
		if(root==null)
		{
			return 0;
		}
		int leftNodes=countNode(root.left);
		int rightNodes=countNode(root.right);
		
		return leftNodes+rightNodes+1;
	}
	
	//sum of nodes
	public static int sumNode(Node root)
	{
		if(root==null)
		{
			return 0;
		}
		int leftsum=sumNode(root.left);
		int rightsum=sumNode(root.right);
		return leftsum+rightsum+root.data;
	}
	
	//height of tree
	public static int height(Node root)
	{
		if(root==null)
		{
			return 0;
		}
		int leftheight=height(root.left);
		int rightheight=height(root.right);
		
		int myHeight=Math.max(leftheight, rightheight)+1;
		
		return myHeight;
	}
	
	//DIameter of tree
	
	public static void main(String[] args) {
		int nodes[]= {1,2,4,-1,-1,5,-1,-1,3,-1,6,-1,-1};
		binarytree tree=new binarytree();
		Node root=tree.buildTree(nodes);
		//System.out.println(root.data);
		preorder(root);
		inorder(root);
		postorder(root);
		levelOrder(root);
		
		System.out.println("Number of nodes is:"+countNode(root));
		System.out.println("Sum of nodes is:"+sumNode(root));
		System.out.println("Height of a tree:"+height(root));
	}
}
